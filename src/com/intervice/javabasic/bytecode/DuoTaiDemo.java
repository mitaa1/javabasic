package com.intervice.javabasic.bytecode;

/**
 * 多态：同一个对象(事物)，在不同时刻体现出来的不同状态。
 * 	举例：
 * 		猫是猫，猫是动物。
 * 		水(液体，固体，气态)。
 *
 * 	多态的前提：
 * 		A:要有继承关系。
 * 		B:要有方法重写。
 * 			其实没有也是可以的，但是如果没有这个就没有意义。
 * 				动物 d = new 猫();//读的时候从右往左读（也可以这样理解猫是new出来的对象，
 * 				而左边是一个类。所以就相当于判断一个对象是不是这个类的实例）猫是猫，猫是动物。
 * 				d.show();
 * 				动物 d = new 狗();
 * 				d.show();
 * 		C:要有父类引用指向子类对象。
 * 			父 f =  new 子();
 *
 * 	用代码体现一下多态。
 *
 * 	多态中的成员访问特点：
 * 		A:成员变量
 * 			编译看左边，运行看左边。
 * 		B:构造方法
 * 			创建子类对象的时候，访问父类的构造方法，对父类的数据进行初始化。
 * 		C:成员方法
 * 			编译看左边，运行看右边。
 * 		D:静态方法
 * 			编译看左边，运行看左边。
 * 			(静态和类相关，算不上重写，所以，访问还是左边的)
 *
 * 		由于成员方法存在方法重写，所以它运行看右边。
 * ————————————————
 * 版权声明：本文为CSDN博主「春雨里de太阳」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
 * 原文链接：https://blog.csdn.net/qq_16633405/article/details/79211002
 */
public class DuoTaiDemo {
    public static void main(String[] args) {
        Fu f=new Zi();
        f.show();
        System.out.println(f.num);
        //找不到符号
       // System.out.println(f.num2);
        f.show();
        //找不到符号
        //f.method();
        //不应该通过类实例访问静态成员
        //f.function();
    }
}
